{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Lab 1",
      "provenance": [],
      "authorship_tag": "ABX9TyPB5K3GFRfyLIk8J4XTIMYV",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nmonsalvet/MetNumUN2022II/blob/main/nmonsalvet/MetNumUN2022II/tree/main/Lab1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ejemplos quantopia 1 "
      ],
      "metadata": {
        "id": "50wk0Szmunfg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " Mi propio ejemplo 1 titulos "
      ],
      "metadata": {
        "id": "3JoP_l-zvBQS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## titulo \n",
        "uso de titulos "
      ],
      "metadata": {
        "id": "pvqKgvUmwHXp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " Mi propio ejemplo 2"
      ],
      "metadata": {
        "id": "7wk5mwFFzZ6k"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "$$2 x^2+ z_t$$"
      ],
      "metadata": {
        "id": "6SjqYSxdzMT5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 3"
      ],
      "metadata": {
        "id": "Z89Mm5vHFxGx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "$$y^3*6x^8$$"
      ],
      "metadata": {
        "id": "4lJLHz7hF2rX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 4"
      ],
      "metadata": {
        "id": "KTTxWkUkzIiI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "19 + 54"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ssz8Xg1EzLAg",
        "outputId": "1efaabae-a0ae-4081-e756-7551ae78e9f6"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "73"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " Mi propio ejemplo 5"
      ],
      "metadata": {
        "id": "QNgth0bc0NOA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y=8"
      ],
      "metadata": {
        "id": "moHM_4Cv0WET"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dVBuQxQw00qg",
        "outputId": "83113890-1a36-4888-d3b5-945e9eecfc38"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 6"
      ],
      "metadata": {
        "id": "REea3QXmFnEw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "457654*87654\n",
        "346654/86"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m_--s3KiFpq5",
        "outputId": "d5e085ad-4725-4b2c-8e02-e65b18440eb4"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4030.860465116279"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " Mi propio ejemplo 7"
      ],
      "metadata": {
        "id": "6LmdZdWZ02_Y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "6+9\n",
        "8+15"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JpJsexvN04pv",
        "outputId": "57848f85-87b0-47ca-91c7-07d501ee18a2"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "23"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 8"
      ],
      "metadata": {
        "id": "7WcG2Z36Dn_Q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(5*78)\n",
        "print(763/6)\n",
        "4-2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WFBJk6ZXDqhf",
        "outputId": "e8ddcb9d-ed3c-4a0b-dfb4-184bda26ffda"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "390\n",
            "127.16666666666667\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 9"
      ],
      "metadata": {
        "id": "D-3zoMC41-Vq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (7+9)\n",
        "3+3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xqCH_lSu08uh",
        "outputId": "e8c609c7-ca1d-4e87-cd0e-83ac73d3d5f4"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "16\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " Mi propio ejemplo 10"
      ],
      "metadata": {
        "id": "CzI6RA7i17mg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "f = 0\n",
        "for g in range(10000000):\n",
        "   f = f + g\n",
        "f"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "88MC79dl4Vao",
        "outputId": "4a3218a8-655e-47d1-9fbf-14d73cc42e58"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "49999995000000"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 11 importa de librerias"
      ],
      "metadata": {
        "id": "90SCDleSPb2T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n"
      ],
      "metadata": {
        "id": "veymEHw5EEqU"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 11 autocompletar "
      ],
      "metadata": {
        "id": "kDu15b7zSREr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "np.absolute\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c7fOK73XSV_i",
        "outputId": "0a3ec857-d408-437c-bba7-8fd8b006fbb6"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<ufunc 'absolute'>"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 12 ayuda "
      ],
      "metadata": {
        "id": "guqtZRPYS6tK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "A = [1,2,3,4]"
      ],
      "metadata": {
        "id": "8RcL_9ygTkw6"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "A.count?"
      ],
      "metadata": {
        "id": "qz5kxPaVTYUK"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 13 sampling "
      ],
      "metadata": {
        "id": "iHC7nip2T20Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y = np.random.normal(0, 1, 1000)\n",
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8bWXGn20T9oy",
        "outputId": "d445cf9b-0fed-448c-c724-fcd4baa061c5"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 5.27966824e-01,  1.44599535e+00, -1.76166802e+00, -9.48758921e-01,\n",
              "        4.08682609e-02, -4.73153205e-01, -8.07953726e-01,  7.08015918e-01,\n",
              "       -9.66153487e-01,  1.66853383e+00,  1.96776525e-02,  5.18226551e-02,\n",
              "        4.42080685e-01,  1.37636725e+00, -5.61203109e-01, -3.38948875e-01,\n",
              "        2.14783313e+00,  1.02317765e+00,  4.24112434e-01, -4.20410828e-01,\n",
              "       -2.01370954e-01,  2.55372516e-02,  3.01698802e-01, -7.22923806e-01,\n",
              "       -1.53892033e+00, -2.34108476e+00, -1.86414992e-01, -1.07461369e+00,\n",
              "       -1.30353102e+00, -1.26132028e+00,  6.03206781e-01,  1.76945600e+00,\n",
              "       -1.01426696e+00,  6.78157803e-01, -2.02061983e-01, -1.71136158e+00,\n",
              "       -6.86401878e-01, -3.12610627e-01, -1.13178161e-01, -1.17346943e+00,\n",
              "        5.18167470e-01,  3.06137767e-01,  2.71238389e-01,  6.16363487e-01,\n",
              "        7.77188380e-01,  1.40475152e+00, -1.06894200e+00,  3.48005088e-03,\n",
              "        2.48460564e-01, -1.90119298e+00,  2.40189114e+00, -8.90656165e-01,\n",
              "        1.57719023e+00,  8.24873973e-01, -1.12455479e+00, -7.00031593e-01,\n",
              "        2.21564904e-01, -9.61510079e-01, -1.35260958e+00,  2.40442217e+00,\n",
              "        6.15300374e-01,  1.31937827e+00,  1.77198746e+00, -1.55557080e-01,\n",
              "       -9.64215530e-01, -1.45004006e-02,  2.71521327e+00, -1.32191304e+00,\n",
              "       -4.81894879e-01, -1.61721057e+00, -6.65794240e-03, -3.29403643e-01,\n",
              "       -1.89903739e+00, -7.64952130e-01, -1.28533727e+00,  8.98153941e-01,\n",
              "       -1.81402636e+00,  1.25128997e+00,  1.49212617e-01, -1.83008157e+00,\n",
              "        1.36457574e+00,  2.28731173e-01,  1.73864661e+00,  1.32370476e+00,\n",
              "        8.92417524e-02, -5.84065211e-01,  2.14940280e+00,  7.96454535e-01,\n",
              "        5.46695538e-01,  5.50484558e-01,  1.90463892e-01,  3.28511682e-01,\n",
              "        9.39117162e-01, -1.33540697e+00, -9.86472202e-01,  3.34782508e-01,\n",
              "       -8.77866353e-01,  5.82562407e-02, -3.64363996e-01,  1.77219459e-01,\n",
              "        2.04020600e-01,  1.12708428e+00,  4.94168403e-01, -4.64953046e-02,\n",
              "        6.92311630e-01, -9.37667019e-01,  2.13487468e+00,  4.28080581e-01,\n",
              "        3.65252069e-01,  1.77944036e-01,  8.21461486e-01,  8.10320474e-02,\n",
              "       -1.33246519e+00, -2.18350895e-01,  6.24113477e-01,  5.61134585e-01,\n",
              "        1.25883471e+00, -1.30727166e+00,  2.33889599e+00,  6.93812065e-02,\n",
              "       -2.74911753e-01,  8.79480189e-01,  4.34891923e-01, -7.45880287e-01,\n",
              "       -5.84676102e-01, -4.14490853e-01,  1.32138346e+00,  2.17536843e-01,\n",
              "        1.63061896e+00, -4.54868120e-01, -4.68135838e-01,  1.67120116e+00,\n",
              "       -3.78940513e-02,  2.19861352e+00,  8.81658023e-02,  5.63863638e-01,\n",
              "       -2.31878098e-01, -8.14948648e-02,  4.43267976e-01,  8.51683848e-01,\n",
              "       -2.08291339e+00, -7.52158666e-01, -2.20845425e-02, -9.54060209e-01,\n",
              "       -1.80214656e-01,  1.14333529e+00, -1.32031329e+00, -3.02496873e-01,\n",
              "       -2.44022278e-01,  5.07779776e-02,  2.03441974e+00,  7.96583448e-01,\n",
              "        1.52022877e+00,  3.27571191e-01,  1.10920005e-01,  7.53294839e-01,\n",
              "       -5.69458951e-02,  7.31564059e-01, -1.05383885e+00,  1.71334368e+00,\n",
              "        4.86499471e-01, -1.76269699e+00,  4.38827149e-01, -1.07266614e+00,\n",
              "       -5.68952454e-01,  1.18734197e+00, -2.64734567e-02, -5.76553712e-01,\n",
              "       -9.26437077e-01,  2.19364975e-01,  2.79361576e-01, -3.76408139e-01,\n",
              "        3.42208158e-01,  1.28488661e+00,  1.87992909e-01, -7.13556060e-01,\n",
              "        8.47543086e-01,  1.95923925e+00, -3.34488775e-01, -4.54642607e-01,\n",
              "        8.65010215e-01,  3.99416659e-01,  1.83867375e+00,  3.47699193e-01,\n",
              "        1.85891975e-01, -4.93921316e-01, -1.82920523e+00,  2.00390864e-01,\n",
              "        1.84980279e+00, -5.56330322e-01, -9.65003342e-01, -9.08256269e-02,\n",
              "       -2.01191119e-01, -1.16995453e-01, -6.86780124e-01, -1.39530475e+00,\n",
              "        6.01846655e-01,  2.70002314e-01,  6.69552498e-02, -1.28640302e+00,\n",
              "        7.02474342e-01, -1.38554253e+00, -2.89946708e-01, -4.11716551e-01,\n",
              "        3.51372372e-01,  9.61885528e-01,  7.27481426e-01,  1.04215229e+00,\n",
              "        7.50847821e-01,  2.90951573e-01, -8.22320998e-01, -2.31027334e-01,\n",
              "       -4.07278467e-01,  6.29834506e-01,  1.23920236e-01,  3.55347698e-01,\n",
              "        4.75488928e-01,  7.13295523e-01, -1.27442635e+00, -2.59362868e-01,\n",
              "        8.29416777e-02, -1.87690426e+00, -3.76036352e-01, -5.04467389e-01,\n",
              "       -1.43901756e+00,  1.30917498e+00,  5.92660934e-01,  1.06432231e+00,\n",
              "        1.02916742e+00, -9.18873189e-01, -3.07509123e-01,  1.14139851e+00,\n",
              "       -1.69653130e-01,  9.83656473e-01, -7.91300110e-01,  2.12067233e+00,\n",
              "       -6.49038139e-01,  3.39703349e-01,  1.53114925e+00,  1.79815929e+00,\n",
              "       -3.46973120e-02, -1.25332146e+00,  6.07776880e-01, -1.48230552e+00,\n",
              "       -3.81527513e-02,  2.52302591e-01,  9.36991022e-01, -3.75133928e-01,\n",
              "        4.89772287e-01,  5.42300672e-01, -1.02042116e+00, -4.12320783e-01,\n",
              "       -5.76185865e-01, -2.00550651e-01,  9.02307290e-02, -4.64713705e-01,\n",
              "        9.63812496e-01,  1.32964148e+00,  9.40529511e-01, -9.74698733e-01,\n",
              "        8.60915545e-01, -2.31761101e-02, -8.69325515e-01, -2.45496997e-01,\n",
              "        1.11909849e+00, -5.53863572e-01,  1.54667741e+00, -6.22541124e-01,\n",
              "       -5.55356342e-01,  4.28245593e-01, -3.54089806e-01,  1.36495705e-01,\n",
              "       -5.49512558e-01, -1.17066981e+00, -3.10431644e-01, -4.13575140e-01,\n",
              "        4.19742430e-02,  8.30120068e-01,  1.67833782e+00, -3.92956945e-01,\n",
              "       -1.37699182e+00,  4.99605494e-01, -1.04818607e-01, -1.23530519e+00,\n",
              "        3.92771088e-01, -1.72360718e+00,  1.42055225e+00,  4.20666112e-01,\n",
              "       -9.40446618e-01, -1.19085647e+00,  3.40334520e-01, -8.15601528e-01,\n",
              "        3.47479511e-01, -8.72146995e-01,  5.96880730e-01, -1.07859908e+00,\n",
              "       -9.56436684e-01,  1.22869717e+00, -6.58265055e-01, -6.12850923e-01,\n",
              "       -8.33493245e-01,  5.83404367e-01, -5.34033827e-01, -4.96011286e-01,\n",
              "       -5.39627343e-01, -1.93803826e-01,  7.11095478e-01, -3.34446671e-01,\n",
              "        4.58393284e-02,  1.07575415e+00, -1.68285272e+00, -4.28870734e-01,\n",
              "        1.27241659e-01,  4.26710582e-01,  2.71270495e-01, -9.17663588e-01,\n",
              "        1.04386269e-01,  6.96474849e-01,  4.00334675e-01, -6.83992864e-01,\n",
              "       -7.85922519e-01, -5.45358721e-01,  1.83072840e+00,  1.06804247e+00,\n",
              "       -3.49189348e-01,  3.46986545e-02, -2.10961935e-01, -1.08137477e+00,\n",
              "       -3.96043939e-01, -2.49985767e+00, -2.23704215e+00,  2.06223751e+00,\n",
              "        1.52360160e+00, -1.24859816e+00, -5.06075068e-01,  6.49404196e-01,\n",
              "        9.43062083e-02,  1.09140863e+00,  1.08846276e-01,  6.97724102e-01,\n",
              "        6.29073983e-01,  4.98212759e-01,  1.96080857e-01, -1.52756859e+00,\n",
              "        1.72195191e-01,  1.74129139e+00, -2.38155478e-02, -3.68993528e-02,\n",
              "       -1.41393115e+00, -1.29706023e+00, -1.34668485e+00,  6.17956041e-01,\n",
              "        9.99345548e-01, -2.45456422e+00,  8.87445256e-01, -2.35860679e-01,\n",
              "       -6.82346901e-01,  3.88479230e-01, -1.96198515e+00, -3.38254958e-03,\n",
              "        8.49548796e-01, -8.67107026e-02,  9.43346967e-01, -1.45984812e+00,\n",
              "        6.85304260e-01, -5.67421780e-01, -8.10729307e-02,  2.79187699e-01,\n",
              "       -1.08911445e+00, -1.03137108e+00, -5.88803052e-01,  8.03660058e-01,\n",
              "       -2.94559083e+00, -2.78898223e-01, -8.49866306e-01,  9.20829967e-01,\n",
              "       -1.87774511e-01, -4.50358325e-01, -1.31333099e+00,  8.79114290e-02,\n",
              "        7.42550111e-01, -4.01113645e-01, -5.95345584e-01,  1.51478405e+00,\n",
              "        1.93306408e+00, -5.93595163e-01,  7.16213092e-01,  1.62691200e+00,\n",
              "       -5.47482864e-01, -4.76113423e-01,  1.31126914e+00, -6.89269326e-01,\n",
              "        1.53015813e+00,  5.40109704e-01, -1.21878745e-01,  1.51920026e-01,\n",
              "       -9.27454543e-01, -5.38240985e-01,  5.93217554e-01,  8.20322855e-01,\n",
              "       -1.08338355e+00,  2.26353587e-01, -2.93396969e-01, -1.46806653e+00,\n",
              "       -1.28740931e-01, -3.97514166e-01,  4.21227355e-01,  5.24209656e-01,\n",
              "       -1.40124290e+00, -1.37538178e-01,  3.29127600e-02, -1.92679781e+00,\n",
              "        6.44412336e-01, -1.27898526e+00, -1.41504836e+00, -6.27984577e-01,\n",
              "       -1.57098272e+00,  2.79923900e-01, -8.22412491e-01, -2.33425238e-01,\n",
              "       -5.89042671e-01,  9.25995739e-01, -9.31352246e-01,  1.64425045e-01,\n",
              "        8.15489316e-01, -1.10681912e+00,  1.44802413e+00,  2.39805696e-01,\n",
              "       -2.24491657e+00,  3.82180269e-01, -4.73320735e-01,  1.42197565e+00,\n",
              "        1.14301258e+00, -4.15646502e-01, -4.72117824e-01,  1.59480402e+00,\n",
              "        1.59527849e+00, -1.41795346e+00, -2.39415802e+00,  4.49641543e-01,\n",
              "        1.34770323e+00, -1.27621890e-01, -9.67892376e-01, -1.32885850e-01,\n",
              "        1.92830989e+00, -6.26187145e-01, -7.58453875e-01, -9.68232347e-01,\n",
              "        1.75210429e-01, -1.38116717e+00,  5.65916793e-01, -1.54825107e+00,\n",
              "        5.68954080e-02,  9.55474051e-01,  1.17134047e+00,  8.65279573e-02,\n",
              "       -8.87236590e-01, -3.05946088e-01, -2.64596046e-02, -4.38426669e-01,\n",
              "       -2.99772933e-01, -7.63102236e-01,  6.02604640e-02,  1.06886305e+00,\n",
              "        2.89250547e-01, -7.04770357e-01, -1.17906721e+00,  9.61583229e-01,\n",
              "       -9.55576056e-03, -1.85653077e+00, -1.22077995e+00, -1.57391950e+00,\n",
              "        1.39668335e+00, -5.89411438e-01,  1.00993149e+00, -3.66365071e-01,\n",
              "       -2.06904768e+00,  1.59501300e+00,  4.32750116e-01, -1.39974262e-01,\n",
              "       -7.59951618e-01,  4.95107462e-01,  6.26133641e-01, -9.00281842e-01,\n",
              "        2.67783287e-01, -2.64086965e-01,  9.41949420e-01, -7.25564784e-01,\n",
              "       -5.62356523e-03,  8.33140105e-01, -2.83654383e-01, -1.35363080e+00,\n",
              "       -1.65646591e-01, -6.16427898e-01,  1.00713863e+00,  1.59195538e-01,\n",
              "       -4.72922662e-01,  1.04401152e+00,  1.85500830e+00, -1.25167440e+00,\n",
              "        1.46637259e+00, -2.36463993e-01,  3.94684921e-01, -1.69696381e-01,\n",
              "       -4.45333357e-01, -4.01089073e-01, -5.40964656e-01,  5.33655350e-01,\n",
              "        6.26214031e-01, -1.60330411e-01, -1.00496690e+00,  1.50635183e+00,\n",
              "        2.46042766e-03, -1.45762641e+00, -3.40269660e-01, -2.37696991e-01,\n",
              "       -1.69396370e-01, -2.17576760e+00, -6.15051144e-01,  8.85961702e-01,\n",
              "       -1.08951672e+00,  1.72782220e+00,  3.11550712e-01, -4.54227486e-01,\n",
              "        9.12454307e-01,  2.53254045e-01,  1.92285108e+00, -1.92069316e-01,\n",
              "        1.01943062e+00, -2.09002956e+00,  1.88772556e+00,  1.64991455e+00,\n",
              "        1.25169745e+00,  1.05732073e-01,  7.99991160e-01, -1.09767083e+00,\n",
              "        1.74229571e-01,  5.65475186e-01,  1.99579734e+00,  1.47312289e-01,\n",
              "        9.07622064e-01, -4.41033378e-01,  2.44695150e-01, -6.45558117e-01,\n",
              "        2.61171598e-01, -6.21729917e-01,  1.35898615e+00,  5.50826305e-01,\n",
              "       -9.06161030e-01,  1.05099510e-01, -6.53657404e-01, -1.88837547e-01,\n",
              "        8.87178755e-01,  8.26202762e-02,  6.90044270e-01, -4.88053927e-01,\n",
              "        4.25165597e-01,  3.99641260e-01, -1.11360249e+00, -6.12251195e-02,\n",
              "       -7.01015967e-01,  1.04158035e-01, -2.21681652e-01, -1.67856470e+00,\n",
              "        1.56507585e-01, -1.22212960e+00,  7.21205648e-01,  4.41319424e-01,\n",
              "       -2.03956495e+00, -5.51905668e-01,  1.29074506e+00, -1.13056036e+00,\n",
              "       -3.81328422e-01, -3.13852107e-01,  5.06568231e-01,  5.89482479e-02,\n",
              "        1.13541276e+00,  3.12418892e-01,  6.46306037e-01, -5.59300483e-01,\n",
              "       -3.23852367e-02,  1.62657949e-01, -6.10034555e-01,  2.16175954e+00,\n",
              "        9.87202380e-01, -4.66045243e-01, -4.26595746e-01,  2.58620968e-01,\n",
              "        2.86292880e-01,  7.96349110e-02,  4.06078181e-02,  1.02086914e+00,\n",
              "       -1.53624878e-01, -1.25599838e-01, -1.43481914e+00,  4.63590516e-01,\n",
              "       -7.23682985e-01,  6.51590849e-03, -8.42316539e-01,  3.24739020e-01,\n",
              "        4.12011387e-01,  9.08452225e-01,  1.79721586e+00,  1.36242371e+00,\n",
              "       -3.07115052e-01,  1.04381664e+00,  8.63445249e-02,  4.57639553e-01,\n",
              "       -5.01651069e-01,  1.12758463e+00,  2.28042996e+00,  1.72099892e+00,\n",
              "        5.95871480e-01,  6.11867214e-01, -1.22273803e-01,  5.75152599e-01,\n",
              "        6.65867793e-01, -1.24550074e+00,  6.16508366e-01, -1.33927488e+00,\n",
              "        6.97569280e-01, -9.68863929e-01, -1.09020755e+00,  1.06700826e+00,\n",
              "        1.12538428e+00,  5.14926559e-01,  1.24294612e+00,  1.26390341e+00,\n",
              "        7.05557293e-01, -1.31048949e+00, -1.52244273e-01, -1.78109099e+00,\n",
              "       -1.07983482e+00, -5.83254628e-01,  1.99942246e+00,  8.40841556e-01,\n",
              "        6.25777981e-01,  2.70655021e-01, -1.27404415e+00, -1.79562676e+00,\n",
              "        3.11601326e-01,  1.31228583e+00, -1.22584500e+00, -5.93918762e-01,\n",
              "        1.76480130e-02, -8.68174999e-01,  1.60610736e+00, -6.56908731e-01,\n",
              "       -5.19467737e-01, -1.12334111e+00,  3.23634978e-01, -6.37666754e-01,\n",
              "        9.91205211e-01, -2.46613600e-01, -2.11635330e-01, -1.29619142e-01,\n",
              "        2.17774465e-01,  3.05246348e-01,  2.02502645e-01, -9.48771726e-01,\n",
              "       -1.43405805e+00,  1.45465330e+00,  2.44432714e-02, -1.32791204e+00,\n",
              "        5.11033601e-01, -1.76762399e+00, -2.09186356e-01,  2.39413023e+00,\n",
              "        3.31286316e-01,  1.14003184e+00,  3.26970365e-01, -8.86369888e-01,\n",
              "       -1.82558968e-02,  1.21471819e+00, -8.10534668e-01, -7.80037404e-01,\n",
              "       -5.35207096e-01,  1.49799790e+00,  2.93335775e-01, -5.00191465e-01,\n",
              "        3.46503261e-01,  3.15874823e-01, -1.95232968e-01, -8.09036006e-02,\n",
              "       -1.57657319e+00,  1.14076225e+00,  5.05176370e-01,  4.35989532e-02,\n",
              "       -8.66067282e-01, -1.15738952e+00,  4.04001499e-01, -1.91494937e-01,\n",
              "        3.69071355e-01, -8.70572362e-01,  8.87043846e-01, -7.66220538e-02,\n",
              "        1.67212062e-01, -1.35976997e+00, -1.24532624e+00,  1.97153386e-01,\n",
              "        8.41527533e-01, -2.86124418e-01, -5.53079740e-01, -1.07407357e+00,\n",
              "        4.74689170e-02,  6.83501294e-01, -4.42025796e-02,  5.94573790e-01,\n",
              "        1.91035784e+00,  3.44470779e-01,  1.46628961e+00, -5.49528760e-01,\n",
              "        9.80298561e-01,  4.75814603e-01,  5.61538026e-01,  9.93413682e-01,\n",
              "       -3.03190615e-01, -4.90169577e-01, -1.42316128e+00, -2.18125935e+00,\n",
              "       -2.04569447e+00, -3.84252312e-01, -1.77899657e-01,  1.81407800e-01,\n",
              "        2.81797057e-01, -1.93675775e-02,  8.19630029e-03,  6.09135032e-01,\n",
              "        7.63118300e-01, -3.49573249e-01,  3.65235091e-02,  1.65043886e+00,\n",
              "        8.21095722e-01,  6.01552615e-02, -5.63350292e-01,  1.80029479e-01,\n",
              "       -6.97725310e-02, -2.05144301e+00, -1.75067494e+00, -7.91504223e-01,\n",
              "       -2.43978859e-01, -5.69713560e-02, -1.38307588e+00,  1.23124826e+00,\n",
              "        2.50484888e-02,  7.97101263e-01,  4.39018832e-01,  4.36985474e-01,\n",
              "        1.30652547e+00,  7.06071046e-01,  1.26110690e+00,  3.82260909e-01,\n",
              "        7.71684653e-02,  2.34409826e+00,  1.01720248e+00, -1.06109699e+00,\n",
              "       -7.03662391e-01, -1.06755397e-01,  9.76036507e-01, -8.43431424e-01,\n",
              "        1.37321936e+00,  1.27583472e+00,  6.23179366e-01, -1.68788420e-03,\n",
              "        3.41923852e-01, -3.32345493e-01,  8.53050919e-01,  1.46643653e+00,\n",
              "       -1.56865700e-01, -7.57832657e-01,  1.04472401e+00,  9.45317793e-02,\n",
              "        5.08512379e-01,  1.51340710e+00,  4.43581532e-01, -8.01281712e-02,\n",
              "        7.39046415e-01, -3.97777414e-01,  4.65952610e-02,  1.25207383e+00,\n",
              "       -5.86363638e-01, -2.26986674e-01,  5.00329479e-02, -1.66728780e+00,\n",
              "        9.47905491e-01,  1.73323661e+00,  1.57679558e+00, -3.56055131e-01,\n",
              "        1.05163980e+00, -2.02821575e-01, -1.28536506e+00,  2.25825393e-01,\n",
              "        8.98406956e-01,  5.21100673e-01,  1.19672092e-02, -6.63809786e-01,\n",
              "        3.94903905e-01, -1.47311805e+00, -4.56895086e-01,  1.14531140e+00,\n",
              "       -1.02497037e+00,  8.27674941e-01,  1.42037224e+00, -2.66985867e-01,\n",
              "       -1.79621643e+00, -8.32322152e-01, -1.86906484e+00, -1.35937721e+00,\n",
              "        9.78488432e-02,  1.06892661e+00, -3.04320644e-01,  1.67514987e+00,\n",
              "        1.56390515e+00,  1.56839252e+00,  1.37538101e+00, -1.20774419e+00,\n",
              "        2.60460129e-01,  1.55562613e+00, -3.17661007e-01, -9.97255596e-02,\n",
              "        1.19276665e+00, -2.25703871e+00, -3.35710018e-01,  1.79889749e+00,\n",
              "        2.51700399e+00,  3.07136478e-01, -6.93022627e-01, -1.19346448e+00,\n",
              "        8.93066599e-01,  2.21860129e-01,  4.97104749e-01, -5.23989370e-01,\n",
              "       -2.52663530e-01,  6.27664545e-01, -1.55874578e-01,  1.51790838e+00,\n",
              "        1.52515751e+00,  1.18192671e+00, -2.28764898e-01, -2.71782314e-02,\n",
              "       -2.64417844e-02, -1.69350508e-01,  3.64444497e-01, -1.07257032e+00,\n",
              "        5.70184428e-02, -9.18893838e-01,  1.00259856e+00,  1.48343585e+00,\n",
              "       -2.06109056e+00, -1.66436866e+00, -2.50270277e+00, -9.56336609e-01,\n",
              "       -8.82190799e-01, -7.62687067e-01, -2.34302656e-01, -4.35599281e-01,\n",
              "        1.53076446e+00, -1.30332642e+00, -1.11284872e+00,  8.30136605e-01,\n",
              "       -1.58379271e+00, -3.82779782e-01,  5.17680144e-01,  2.55103351e-01,\n",
              "       -1.20482656e+00, -9.92754612e-01, -4.44210815e-01,  9.94495850e-01,\n",
              "        2.65451072e-01, -1.56065884e+00, -2.89401596e-01,  7.34205632e-01,\n",
              "        2.93602525e+00, -7.51387398e-01, -9.23289934e-02, -7.03136304e-01,\n",
              "       -7.67083459e-01,  5.20270598e-01, -1.79611092e-02, -1.45465067e+00,\n",
              "       -5.68355565e-01,  1.71691315e-01,  2.41722284e-01,  4.79875007e-01,\n",
              "        1.65999045e+00,  7.69732470e-01, -1.02313657e-01,  3.33657813e+00,\n",
              "       -6.45958013e-01,  7.36136698e-01,  1.09137063e-01, -8.92716796e-01,\n",
              "       -4.03474200e-01, -8.09102567e-01, -1.42283705e+00, -1.61912132e+00,\n",
              "        1.21836740e+00,  7.34101864e-02, -9.98088038e-01, -1.70357060e-01,\n",
              "       -3.93275024e-01,  2.50110455e+00, -3.44098738e-01,  2.02270336e-01,\n",
              "        2.28744142e-01, -1.02151446e+00,  1.52596124e+00,  9.92692463e-01,\n",
              "        1.34894888e+00,  6.90609442e-01,  5.38426170e-01,  3.43135236e-01,\n",
              "        3.04794480e-01, -4.60627457e-01,  5.19187082e-02, -1.77773297e+00,\n",
              "       -5.62203380e-01, -1.17471914e+00, -5.18197902e-01, -2.26599700e+00,\n",
              "        1.69087032e+00, -1.19363800e+00,  3.87281324e-01,  1.10369388e+00,\n",
              "       -7.55095887e-01, -3.64928401e-01,  2.19284405e-01,  1.82180357e+00,\n",
              "        9.63346177e-01, -3.12994964e-02, -1.22934900e+00,  1.14718284e-01,\n",
              "       -3.20624650e-01, -8.70389852e-02,  9.55015328e-03, -4.21957079e-01,\n",
              "       -5.97024991e-01, -1.40868551e+00,  1.13294501e+00, -1.68001685e+00,\n",
              "       -9.12952322e-01, -5.71995827e-02, -3.97890538e-01,  1.56271040e+00,\n",
              "       -2.49949490e+00, -9.09613294e-01, -1.85230780e+00,  7.26569077e-01,\n",
              "       -1.06719477e+00, -1.15447994e+00, -5.59949209e-01,  7.00318068e-02,\n",
              "       -2.88623435e-01,  9.16051080e-01, -1.20170486e+00,  1.41321491e+00,\n",
              "       -9.96551150e-01,  6.44230369e-01, -5.08076329e-01,  7.91476589e-01,\n",
              "        4.25301029e-01,  3.33803451e-01, -8.11976524e-01,  1.75408983e+00,\n",
              "        1.60245707e+00,  1.66365472e-01, -1.57242549e+00,  4.50544831e-02,\n",
              "        7.10742622e-01, -9.65862558e-01, -1.95278430e-01,  1.07752516e-01,\n",
              "        1.65895365e+00,  8.80611156e-01,  9.64943355e-01,  7.06931741e-02,\n",
              "       -1.30804981e-01, -6.62095854e-01, -1.46898814e-01,  1.91701536e+00,\n",
              "        7.77065338e-01, -6.23728123e-01, -1.24248698e+00,  4.68592938e-01,\n",
              "        1.63515100e+00,  1.89950492e-01,  1.40673556e+00,  1.39003548e-01,\n",
              "       -6.93748870e-02, -1.56253643e+00,  2.93530306e-01,  8.49099529e-01,\n",
              "        2.49390640e+00, -3.89564608e-01,  1.04963325e+00,  4.86223675e-01,\n",
              "       -3.99123565e-03, -8.98910234e-01, -4.09111734e-01, -2.58727586e-01])"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 14  Plotting"
      ],
      "metadata": {
        "id": "jjla2IZKU_Pq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot (y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "4GfFcdoGVtV6",
        "outputId": "07674779-f216-4e83-c405-9fbc946077e7"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f230b854190>]"
            ]
          },
          "metadata": {},
          "execution_count": 34
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 15"
      ],
      "metadata": {
        "id": "IyJRxPMU_oiY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = np.random.normal (0, 1, 100)\n",
        "x2 = np.random.normal (0, 1, 1000)\n",
        "plt.plot (x);\n",
        "plt.plot (x2);\n",
        "plt.xlabel ('time')\n",
        "plt.ylabel ('Returns')\n",
        "plt.legend (['x', 'x2']);\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "kvBdKwViE9M_",
        "outputId": "90f49bd0-c13e-4e93-c87e-4610c324a80e"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi ejemplo 16"
      ],
      "metadata": {
        "id": "oqW7dQ2NGUmS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "np.mean (y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fH6TF7uIGWTd",
        "outputId": "d6ea302f-5322-46ff-cb0b-14d832c3b348"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.02288928899263401"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.std (y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vkyd-hJmGn-u",
        "outputId": "7cd0283e-0c9b-453d-8f81-b7ff7e9371c1"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9901546918835258"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 17"
      ],
      "metadata": {
        "id": "8OZmhOnEWF2J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install yfinance"
      ],
      "metadata": {
        "id": "7AcipUSmZeCW",
        "outputId": "8e267b7d-b490-4de0-d476-c5c2c7d520a9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting yfinance\n",
            "  Downloading yfinance-0.1.74-py2.py3-none-any.whl (27 kB)\n",
            "Collecting requests>=2.26\n",
            "  Downloading requests-2.28.1-py3-none-any.whl (62 kB)\n",
            "\u001b[K     |████████████████████████████████| 62 kB 1.5 MB/s \n",
            "\u001b[?25hRequirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.7/dist-packages (from yfinance) (0.0.11)\n",
            "Requirement already satisfied: numpy>=1.15 in /usr/local/lib/python3.7/dist-packages (from yfinance) (1.21.6)\n",
            "Requirement already satisfied: lxml>=4.5.1 in /usr/local/lib/python3.7/dist-packages (from yfinance) (4.9.1)\n",
            "Requirement already satisfied: pandas>=0.24.0 in /usr/local/lib/python3.7/dist-packages (from yfinance) (1.3.5)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->yfinance) (2022.2.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->yfinance) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas>=0.24.0->yfinance) (1.15.0)\n",
            "Requirement already satisfied: charset-normalizer<3,>=2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->yfinance) (2.1.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->yfinance) (2022.6.15)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->yfinance) (1.24.3)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->yfinance) (2.10)\n",
            "Installing collected packages: requests, yfinance\n",
            "  Attempting uninstall: requests\n",
            "    Found existing installation: requests 2.23.0\n",
            "    Uninstalling requests-2.23.0:\n",
            "      Successfully uninstalled requests-2.23.0\n",
            "Successfully installed requests-2.28.1 yfinance-0.1.74\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import yfinance as yf\n",
        "\n",
        "data = yf.download(\"MSFT\", start=\"2009-1-1\", end=\"2016-6-1\") \n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NDUvfoXZshk9",
        "outputId": "05798d6f-2cef-4688-8488-b900b7491438"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\r[*********************100%***********************]  1 of 1 completed\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "fLsrGM2KsyYy",
        "outputId": "8ade9da6-4bd3-4baa-b353-584d532d215b"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 Open       High        Low      Close  Adj Close    Volume\n",
              "Date                                                                       \n",
              "2009-01-02  19.530001  20.400000  19.370001  20.330000  15.242962  50084000\n",
              "2009-01-05  20.200001  20.670000  20.059999  20.520000  15.385417  61475200\n",
              "2009-01-06  20.750000  21.000000  20.610001  20.760000  15.565371  58083400\n",
              "2009-01-07  20.190001  20.290001  19.480000  19.510000  14.628149  72709900\n",
              "2009-01-08  19.629999  20.190001  19.549999  20.120001  15.085511  70255400\n",
              "...               ...        ...        ...        ...        ...       ...\n",
              "2016-05-24  50.700001  51.709999  50.400002  51.590000  47.042908  34757900\n",
              "2016-05-25  51.919998  52.490002  51.790001  52.119999  47.526188  24040200\n",
              "2016-05-26  51.930000  51.980000  51.360001  51.889999  47.316460  24335200\n",
              "2016-05-27  51.919998  52.320000  51.770000  52.320000  47.708572  17721400\n",
              "2016-05-31  52.259998  53.000000  52.080002  53.000000  48.328632  37653100\n",
              "\n",
              "[1865 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a669203d-3088-43df-b072-564772067fc0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2009-01-02</th>\n",
              "      <td>19.530001</td>\n",
              "      <td>20.400000</td>\n",
              "      <td>19.370001</td>\n",
              "      <td>20.330000</td>\n",
              "      <td>15.242962</td>\n",
              "      <td>50084000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2009-01-05</th>\n",
              "      <td>20.200001</td>\n",
              "      <td>20.670000</td>\n",
              "      <td>20.059999</td>\n",
              "      <td>20.520000</td>\n",
              "      <td>15.385417</td>\n",
              "      <td>61475200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2009-01-06</th>\n",
              "      <td>20.750000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>20.610001</td>\n",
              "      <td>20.760000</td>\n",
              "      <td>15.565371</td>\n",
              "      <td>58083400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2009-01-07</th>\n",
              "      <td>20.190001</td>\n",
              "      <td>20.290001</td>\n",
              "      <td>19.480000</td>\n",
              "      <td>19.510000</td>\n",
              "      <td>14.628149</td>\n",
              "      <td>72709900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2009-01-08</th>\n",
              "      <td>19.629999</td>\n",
              "      <td>20.190001</td>\n",
              "      <td>19.549999</td>\n",
              "      <td>20.120001</td>\n",
              "      <td>15.085511</td>\n",
              "      <td>70255400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-05-24</th>\n",
              "      <td>50.700001</td>\n",
              "      <td>51.709999</td>\n",
              "      <td>50.400002</td>\n",
              "      <td>51.590000</td>\n",
              "      <td>47.042908</td>\n",
              "      <td>34757900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-05-25</th>\n",
              "      <td>51.919998</td>\n",
              "      <td>52.490002</td>\n",
              "      <td>51.790001</td>\n",
              "      <td>52.119999</td>\n",
              "      <td>47.526188</td>\n",
              "      <td>24040200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-05-26</th>\n",
              "      <td>51.930000</td>\n",
              "      <td>51.980000</td>\n",
              "      <td>51.360001</td>\n",
              "      <td>51.889999</td>\n",
              "      <td>47.316460</td>\n",
              "      <td>24335200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-05-27</th>\n",
              "      <td>51.919998</td>\n",
              "      <td>52.320000</td>\n",
              "      <td>51.770000</td>\n",
              "      <td>52.320000</td>\n",
              "      <td>47.708572</td>\n",
              "      <td>17721400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-05-31</th>\n",
              "      <td>52.259998</td>\n",
              "      <td>53.000000</td>\n",
              "      <td>52.080002</td>\n",
              "      <td>53.000000</td>\n",
              "      <td>48.328632</td>\n",
              "      <td>37653100</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1865 rows × 6 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a669203d-3088-43df-b072-564772067fc0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a669203d-3088-43df-b072-564772067fc0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a669203d-3088-43df-b072-564772067fc0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 18"
      ],
      "metadata": {
        "id": "eE6xnS29f3gJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "t = data['Close']"
      ],
      "metadata": {
        "id": "_SHzDtdtYI2l"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(t.index, t.values)\n",
        "plt.xlabel('close')\n",
        "plt.ylabel('MSFT')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "nm-TRV9Aa_6E",
        "outputId": "063af41c-782a-4d91-e030-d69c6eaf37b1"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'MSFT')"
            ]
          },
          "metadata": {},
          "execution_count": 42
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.mean(t)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QQ0QYX8rbmxU",
        "outputId": "8afce811-b7c2-4a35-92f0-6c48b9bfa482"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "33.614375344550005"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.std(t)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FDnC6X92bqy7",
        "outputId": "ccdd4dd2-9b4b-4f21-d1fd-d781175b3003"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "9.708834183754346"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 19\n"
      ],
      "metadata": {
        "id": "xdxWdAXBcBDU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "T = t.pct_change()[1:]"
      ],
      "metadata": {
        "id": "GTf4mKb9cGYD"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(T, bins=30)\n",
        "plt.xlabel('retorno')\n",
        "plt.ylabel('frecuencia')\n",
        "plt.legend(['MSFT Retorno']);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "IPPXWX5ucYfA",
        "outputId": "2ab8da51-8001-4a41-c502-ce90ce1f8e84"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.mean(T)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OhEglovocYaw",
        "outputId": "2f56be43-13c6-487e-fd98-cb688e92a552"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.000646289069364475"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.std(T)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "knUWFiyWdZLz",
        "outputId": "45e13b74-41f6-4da2-c8cd-3c80e59d8d78"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.01624995960508538"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 20"
      ],
      "metadata": {
        "id": "aBZp6jKNdmBW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(np.random.normal(np.mean(T), np.std(T), 1000), bins=2000)\n",
        "plt.xlabel('Retorno')\n",
        "plt.ylabel('Frecuencia')\n",
        "plt.legend('distribucion normal')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "nrDPBWWWdpps",
        "outputId": "50a00a0e-7337-4ef9-b68c-53dea929598f"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f2309965410>"
            ]
          },
          "metadata": {},
          "execution_count": 49
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXgAAAEGCAYAAABvtY4XAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAATH0lEQVR4nO3df5RndX3f8eeL3YUFAfnhYG1WM+gppqiAdND8oJyINWJMEH+kyqlGTeyenmpK2pC4nu2pJK3nRFNb2xrbbm0sOTFBxUg1UFO0EsmJMczCCigSELCOIWXAX/xaEfLuH987h9lhfnxn5nvnO/vZ5+Oc75n7/d7PvZ/3Z2d5cffe+/3cVBWSpPYcNu4CJEn9MOAlqVEGvCQ1yoCXpEYZ8JLUqK3jLmC+pzzlKTU5OTnuMiTpoLF37957q2pisXWbKuAnJyeZnp4edxmSdNBI8vWl1nmKRpIaZcBLUqMMeElq1KY6By9J4/CDH/yAmZkZ9u/fP+5SlrR9+3Z27NjBtm3bht7GgJd0yJuZmeGYY45hcnKSJOMu5wmqivvuu4+ZmRlOPvnkobfzFI2kQ97+/fs58cQTN2W4AyThxBNPXPW/MHoN+CTHJbk8yVeT3JLkx/rsT5LWarOG+5y11Nf3KZr/AHy6ql6T5HDgqJ77kyR1egv4JE8GzgHeBFBVjwCP9NWfJI3K5K4rR7q/u37z5atqf8kll3D00Udz8cUXr6vfPk/RnAzMAh9KckOSDyZ50sJGSXYmmU4yPTs722M50oFG/R+xtNn0GfBbgTOB/1xVzwceBHYtbFRVe6pqqqqmJiYWnU5Bkpr3rne9i1NOOYWzzz6bW2+9dST77DPgZ4CZqvpi9/5yBoEvSZpn7969XHbZZezbt4+rrrqK6667biT77S3gq+qvgW8keXb30YuBr/TVnyQdrK699lpe+cpXctRRR3Hsscdy/vnnj2S/fd9F80vAh7s7aO4A3txzf5KkTq/3wVfVvu78+mlVdUFVfbvP/iTpYHTOOedwxRVX8PDDD3P//ffzqU99aiT7daoCSVpgtbc1rteZZ57Ja1/7Wk4//XROOukkzjrrrJHs14CXpE1g9+7d7N69e6T7dC4aSWqUAS9JjTLgJYnBlLyb2VrqM+AlHfK2b9/Offfdt2lDfm4++O3bt69qOy+ySjrk7dixg5mZGTbzfFhzT3RaDQNe0iFv27Ztq3pS0sHCUzSS1CgDXpIaZcBLUqMMeElqlAEvSY0y4CWpUQa8JDXKgJekRhnwktQoA16SGmXAS1KjDHhJapQBL0mNMuAlqVEGvCQ1yoCXpEYZ8JLUqF6f6JTkLuB+4DHg0aqa6rM/SdLjNuKRfS+qqns3oB9J0jyeopGkRvUd8AX87yR7k+xcrEGSnUmmk0xv5ieaSweTyV1XjrsEbQJ9B/zZVXUm8DLgrUnOWdigqvZU1VRVTU1MTPRcjiQdOnoN+Kr6ZvfzHuATwAv67E+S9LjeAj7Jk5IcM7cM/BRwc1/9SZIO1OddNE8FPpFkrp/fr6pP99ifJGme3gK+qu4ATu9r/5Kk5XmbpCQ1yoCXpEYZ8JLUKANekhplwEtSowx4SWqUAS9JjTLgJalRBrwkNcqAl6RGGfCS1CgDXpIaZcBLUqMMeElqlAEvSY0y4CWpUQa8JDXKgJekRhnwktQoA16SGmXAS1KjDHhJapQBL0mNMuAlqVEGvCQ1yoCXpEb1HvBJtiS5Ickf9d2XJOlxG3EEfxFwywb0I0map9eAT7IDeDnwwT77kSQ9Ud9H8O8Dfg34m6UaJNmZZDrJ9OzsbM/l6GAyuevKXtpKh4reAj7JzwD3VNXe5dpV1Z6qmqqqqYmJib7KkaRDTp9H8D8BnJ/kLuAy4Nwkv9djf5KkeXoL+Kp6R1XtqKpJ4HXA/6mq1/fVnyTpQN4HL0mN2roRnVTVNcA1G9GXJGlgqCP4JD+a5LokDyR5JMljSb7Xd3GSpLUb9hTN+4ELgduAI4G3AL/dV1GSpPUb+hx8Vd0ObKmqx6rqQ8B5/ZUlSVqvYc/BP5TkcGBfkvcAd+MFWkna1IYN6TcAW4C3AQ8CTwde3VdRkqT1G+oIvqq+3i0+DPx6f+VIkkZl2YBP8tGq+odJbgJq4fqqOq23yiRJ67LSEfxF3c+f6bsQSdJoLRvwVXV3t3gYcHdV7QdIciTw1J5rkyStw7AXWT/GgVP+PtZ9JknapIYN+K1V9cjcm2758H5KkiSNwrABP5vk/Lk3SV4B3NtPSZKkURj2i07/BPhwkvcDAb4B/HxvVUmS1m3Y++C/BvxokqO79w/0WpUkad2GCvgkRzD45uoksDUJAFX1G71VJklal2FP0fxP4LvAXuD7/ZUjSRqVYQN+R1U5e6QkHUSGvYvmz5I8r9dKJEkjNewR/NnAm5LcyeAUTYByLhpJ2ryGDfiX9VqFJGnkhjpF000X/HTg3G75oWG3lSSNx7AP3X4n8HbgHd1H24Df66soSdL6DXsU/krgfAZPc6Kq/go4pq+iJEnrN2zAP1JVRffQjyRP6q8kSdIoDBvwH03yX4Hjkvxj4DPAf+uvLEnSeg07F82/TfIS4HvAs4F/VVVXL7dNku3A54Ejun4ur6p3rrNeSdKQhr1Nki7Qlw31Bb7P4K6bB5JsA/40yf+qqj9fbZGSpNUbdrKx+3n8oduHM7iL5sGqOnapbbpz9nOzTm7rXk94cLckqR/D3gd/TFUd2wX6kQxmlvzAStsl2ZJkH3APcHVVfXGRNjuTTCeZnp2dXWX5GqfJXVeuad0w6/s27v7X4mCsWeO16i8r1cAVwEuHaPtYVZ0B7ABekOS5i7TZU1VTVTU1MTGx2nIkSUsY9hTNq+a9PQyYAvYP20lVfSfJ54DzgJtXVaEkaU2Gvcj6s/OWHwXuAl6x3AZJJoAfdOF+JPAS4N1rKVKStHrD3ib55jXs+2nApUm2MDjq/2hV/dEa9iNJWoNhT9FcClxUVd/p3h8PvLeqfmGpbarqRuD5I6lSkrRqw15kPW0u3AGq6tsY3pK0qQ0b8Id1R+0AJDmBVXxJSpK08YYN6fcCX0jyse79zwHv6qckSdIoDHuR9XeTTAPndh+9qqq+0l9ZkqT1Ws0XnU5gMD3B+4HZJCf3VJMkaQR8opMkNconOklSo3yikyQ1yic6SVKjVryLJkmAjwA/wiqe6CRJGq8VA76qKslVVfU8VvdEJ0nSGA17iub6JGf1WokkaaSG/SbrC4HXJ7mLwZ00YXBwf1pfhUmS1mfZgE/yjKr6vwzx9CZJ0uay0hH8FcCZVfX1JB+vqldvRFGSpPVb6Rx85i0/s89CJEmjtVLA1xLLkqRNbqVTNKcn+R6DI/kju2V4/CLrsb1WJ0las2UDvqq2bFQhkqTRWs10wZKkg4gBL0mNMuAlqVEGvCQ1yoCXpEYZ8JLUKANekhrVW8AneXqSzyX5SpIvJ7mor74kSU807HTBa/Eo8CtVdX2SY4C9Sa6uqq/02KckqdPbEXxV3V1V13fL9wO3AD/UV3+SpANtyDn4JJPA84EvLrJuZ5LpJNOzs7MbUc6mMLnrynVvO+w+Rt1utW1X2nalfS023sldVz7h8/mfLdduqfXD1rNYn0tts1SfS41rpf6X25+0UO8Bn+Ro4OPAL1fV9xaur6o9VTVVVVMTExN9lyNJh4xeAz7JNgbh/uGq+sM++5IkHajPu2gC/Hfglqr6d331I0laXJ9H8D8BvAE4N8m+7vXTPfYnSZqnt9skq+pPOfCRf5KkDeQ3WSWpUQa8JDXKgJekRhnwktQoA16SGmXAS1KjDHhJapQBL0mNMuAlqVEGvCQ1yoCXpEYZ8JLUKANekhplwEtSowx4SWqUAS9JjTLgJalRBrwkNcqAl6RGGfCS1CgDXpIaZcBLUqMMeElqlAEvSY0y4CWpUb0FfJLfSXJPkpv76kOStLQ+j+D/B3Bej/uXJC2jt4Cvqs8D3+pr/5Kk5Y39HHySnUmmk0zPzs6OdN+Tu65c8/qVth2lYfpaz1iWa79wu6U+H3ab+esWvl+p5rn2C/ex0jbD7HuldUv1vdhruf0u1nY12y712XI1L7X9YmMeppalth3283HZbPVsBmMP+KraU1VTVTU1MTEx7nIkqRljD3hJUj8MeElqVJ+3Sf4B8AXg2UlmkvxiX31Jkp5oa187rqoL+9q3JGllnqKRpEYZ8JLUKANekhplwEtSowx4SWqUAS9JjTLgJalRBrwkNcqAl6RGGfCS1CgDXpIaZcBLUqMMeElqlAEvSY0y4CWpUQa8JDXKgJekRhnwktQoA16SGmXAS1KjDHhJapQBL0mNMuAlqVEGvCQ1yoCXpEYZ8JLUqF4DPsl5SW5NcnuSXX32JUk6UG8Bn2QL8NvAy4BTgQuTnNpXf5KkA/V5BP8C4PaquqOqHgEuA17RY3+SpHlSVf3sOHkNcF5VvaV7/wbghVX1tgXtdgI7u7fPBm7tpaDRegpw77iL6EnLY4O2x9fy2KDt8a1nbD9cVROLrdi69npGo6r2AHvGXcdqJJmuqqlx19GHlscGbY+v5bFB2+Pra2x9nqL5JvD0ee93dJ9JkjZAnwF/HfB3kpyc5HDgdcAne+xPkjRPb6doqurRJG8D/hjYAvxOVX25r/422EF1SmmVWh4btD2+lscGbY+vl7H1dpFVkjRefpNVkhplwEtSowz4JSQ5IcnVSW7rfh6/RLs3dm1uS/LGRdZ/MsnN/Vc8vPWMLclRSa5M8tUkX07ymxtb/eJWmhYjyRFJPtKt/2KSyXnr3tF9fmuSl25k3cNa6/iSvCTJ3iQ3dT/P3ejaV7Ke3123/hlJHkhy8UbVvBrr/Lt5WpIvdP+t3ZRk+6o6rypfi7yA9wC7uuVdwLsXaXMCcEf38/hu+fh5618F/D5w87jHM6qxAUcBL+raHA5cC7xszOPZAnwNeGZX05eAUxe0+afAf+mWXwd8pFs+tWt/BHByt58t4/4djXB8zwf+drf8XOCb4x7PqMY2b/3lwMeAi8c9nhH/7rYCNwKnd+9PXO3fTY/gl/YK4NJu+VLggkXavBS4uqq+VVXfBq4GzgNIcjTwL4B/swG1rtaax1ZVD1XV5wBqMAXF9Qy+4zBOw0yLMX/MlwMvTpLu88uq6vtVdSdwe7e/zWTN46uqG6rqr7rPvwwcmeSIDal6OOv53ZHkAuBOBmPbjNYzvp8CbqyqLwFU1X1V9dhqOjfgl/bUqrq7W/5r4KmLtPkh4Bvz3s90nwH8a+C9wEO9Vbh26x0bAEmOA34W+GwfRa7CirXOb1NVjwLfZXBENMy247ae8c33auD6qvp+T3WuxZrH1h1EvR349Q2oc63W87s7Bagkf5zk+iS/ttrOxz5VwTgl+QzwtxZZtXv+m6qqJEPfT5rkDOBZVfXPF54v3Ch9jW3e/rcCfwD8x6q6Y21VaqMkeQ7wbgZHha24BPj3VfVAd0Dfmq3A2cBZDA4UP5tkb1UNfUB1SAd8Vf2DpdYl+X9JnlZVdyd5GnDPIs2+CfzkvPc7gGuAHwOmktzF4M/4pCTXVNVPskF6HNucPcBtVfW+EZS7XsNMizHXZqb7n9OTgfuG3Hbc1jM+kuwAPgH8fFV9rf9yV2U9Y3sh8Jok7wGOA/4myf6qen//ZQ9tPeObAT5fVfcCJLkKOJPV/It53BchNusL+C0OvBD5nkXanMDg/N/x3etO4IQFbSbZfBdZ1zU2BtcVPg4cNu6xdPVsZXAR+GQev5D1nAVt3sqBF7I+2i0/hwMvst7B5rvIup7xHde1f9W4xzHqsS1ocwmb8yLren53xzO4xnVUt5/PAC9fVf/j/gPYrC8G58A+C9zW/cHOhdsU8MF57X6BwYW524E3L7KfzRjwax4bgyOQAm4B9nWvt2yCMf008JcM7ljY3X32G8D53fJ2Bnda3A78BfDMedvu7ra7lTHfETTq8QH/Enhw3u9qH3DSuMczqt/dvH1syoAfwd/N1zO4gHwzixyIrfRyqgJJapR30UhSowx4SWqUAS9JjTLgJalRBrwkNcqAV9OSPJZkX5Kbk3yqm15hufYXJDl1o+qT+mTAq3UPV9UZVfVc4FsMvlSynAsYzDA5tO7bh9KmY8DrUPIFuomekjwryae7OdKvTfIjSX4cOB/4re6o/1lJzkjy50luTPKJubnzk1yT5H1JpoGLuvfvTvIXSf4yyd/v2m1P8qFuLu8bkrxoXIPXoceA1yEhyRbgxcAnu4/2AL9UVX8PuBj4QFX9Wbf+V7uj/q8Bvwu8vapOA24C3jlvt4dX1VRVvbd7v7WqXgD88rx2b2Uwp9vzgAuBS1f90AZpjfynpVp3ZJJ9DI7cbwGu7qaZ/XHgY/NmIXzCHOlJngwcV1V/0n10KYOvlM/5yIJN/rD7uZfBFBUwmA3wPwFU1VeTfJ3BNLA3rmNM0lA8glfrHq6qM4AfBsLgiPow4DvdUfrc6++uYd8PLng/N8/6Y3jwpE3AgNchoaoeAv4Z8CsM5ta+M8nPAWTg9K7p/cAx3TbfBb49dz4deAPwJ6zOtcA/6vo5BXgGg0nNpN4Z8DpkVNUNDE6NXMggdH8xyZcYzNY39xi1y4Bf7S6IPgt4I4OLrjcCZzCYBXA1PgAcluQmBqd03lSb64lKapizSUpSozyCl6RGGfCS1CgDXpIaZcBLUqMMeElqlAEvSY0y4CWpUf8fq1QW31oOetcAAAAASUVORK5CYII=\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "quantopia 2 introduccion a python"
      ],
      "metadata": {
        "id": "4_5OTwtnfYKg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "Mi propio ejemplo 1"
      ],
      "metadata": {
        "id": "4G9WaXhKtwZ8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# con numeral se puede insertae comentarios \n",
        "# este tipo de codigo no tiene un caracter evaluativo "
      ],
      "metadata": {
        "id": "rXZBD_1Dt2B8"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 2 "
      ],
      "metadata": {
        "id": "NJzsTT6KuZ7B"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"esto es un ejemplo\"\"\""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "UiXM2Pwfuc_Z",
        "outputId": "6852172e-3fdd-4163-b0fe-74f549c4b6fb"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'esto es un ejemplo'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 3 variables"
      ],
      "metadata": {
        "id": "Qq7Of7VBvsyH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "p = 60 \n",
        "print(p, type(p))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a-7dBUDmvyFF",
        "outputId": "b5d3db6a-e591-4d43-bff9-aaa59adfb0fa"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "60 <class 'int'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dos = 7\n",
        "print(dos)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XVBZ8L2zgmdZ",
        "outputId": "cf2d5939-745c-4cc3-a294-10263d7c2458"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f = 2.8\n",
        "print(f, type(f))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aAiKpq3bokc5",
        "outputId": "f653a2fa-729b-46c2-ce17-39d4ad2efec2"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.8 <class 'float'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "i = 98686\n",
        "print(i, type(i))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-y4iX8ZBovZ9",
        "outputId": "75fb861a-d211-4ffa-ca3d-5eaef34ac580"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "98686 <class 'int'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "o = int(8.957363)\n",
        "print(o, type(o))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SEHI6AEgh8Ua",
        "outputId": "5b109f67-548e-45f5-a441-b857aba9eb80"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8 <class 'int'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 4"
      ],
      "metadata": {
        "id": "UygV2LjOgWOK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "s = 'esto es una cuerda'\n",
        "print(s)\n",
        "s = \"esto es una cuerda en doble coma\"\n",
        "print(s)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i3Okvslho7_V",
        "outputId": "92191bb9-1b39-4e30-b741-38233f9fa29d"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "esto es una cuerda\n",
            "esto es una cuerda en doble coma\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s2 = '\"prueba\" por Nicolas M'\n",
        "print(s2)\n",
        "s2 = \"'otra prueba/usando comilla y doble comilla;'\"\n",
        "print(s2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FPrKuKD0pfrl",
        "outputId": "bc1acc9b-282e-45ac-9163-91636941e018"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\"prueba\" por Nicolas M\n",
            "'otra prueba/usando comilla y doble comilla;'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "b = True\n",
        "print(b, type(b))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kYEizfbQqhzQ",
        "outputId": "3765d3b5-c503-49c3-faa8-eac20f963bcf"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True <class 'bool'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 5 matematicas basicas python "
      ],
      "metadata": {
        "id": "QmJeTCM7rArc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('suma', 6+3927)"
      ],
      "metadata": {
        "id": "R_3WQmOHrFbB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "df3420c4-98d4-4acc-b889-fade79ba7786"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "suma 3933\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('resta', 745282-987)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yBw8FlHdiwe5",
        "outputId": "bd10ccff-21c7-404f-fc28-6295735b830f"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "resta 744295\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('multiplicacion', 698*763)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cfliqfX8i-6-",
        "outputId": "407f8953-9627-487a-be2d-aa4ecba7d21c"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "multiplicacion 532574\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('division', 653/5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8g72pCDbjEeF",
        "outputId": "4601dd18-4d61-4061-e3ae-a51cd9b7a753"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "division 130.6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('exponencial', 765**7)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JOhgoc2EjLq-",
        "outputId": "2efc3700-77da-4d78-9413-96b884fd71d6"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "exponencial 153331027535948203125\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('modulo:', 5%5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8EzpxvzAjuES",
        "outputId": "80a5179e-d3ee-4974-d47f-0897cf02e4a0"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "modulo: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 6"
      ],
      "metadata": {
        "id": "YXM9wzLpMgmL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "primero = 8\n",
        "segundo = 7\n",
        "print(primero * segundo)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N-AojWGJkY8w",
        "outputId": "bccc2c95-a849-4b28-f189-377d94f75b14"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "56\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "primero = 13\n",
        "segundo = 5\n",
        "print(primero/segundo)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lag6yzyDkwYh",
        "outputId": "7a1232fb-f874-488f-cab7-79bd109e6fea"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "primero = 13.76\n",
        "segundo = 6.87\n",
        "print(primero/segundo)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O7u3CEGPk4dq",
        "outputId": "580bcde8-f64e-466d-ad8e-d43c497ebba4"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.002911208151383\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 7"
      ],
      "metadata": {
        "id": "I5m004U7MjeX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "abs(7-165)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i0m6tpWdldfA",
        "outputId": "6fa47841-dd61-42a3-c7c8-961f1bfcdbe4"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "158"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "round(6.86)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1LYcaXh4lvUu",
        "outputId": "1280c477-6e73-405a-8619-f865baf318d4"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "max(2, 7, 98)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PnZxc9Ifl2WL",
        "outputId": "760f3994-9d91-4e95-93fe-865a8a0c20ec"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "98"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "min(7, 76, 6)"
      ],
      "metadata": {
        "id": "2Rf6UN2_l_rX",
        "outputId": "ca5dc007-cc98-4d92-d27e-9c3f6f025a92",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 8"
      ],
      "metadata": {
        "id": "q0wGQoSyNKOJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math as ma"
      ],
      "metadata": {
        "id": "Gss11eSYNLpI"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('Tau:', ma.tau)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_ZYppWGvPWpf",
        "outputId": "69dde229-e85e-4f9e-c658-adefbe5d7d62"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tau: 6.283185307179586\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "mi propio ejemplo 9"
      ],
      "metadata": {
        "id": "hmURbkkQQNKY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('cos:', ma.cos(1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K24h1YEmQO4U",
        "outputId": "49c879b7-8bba-40b7-9a31-85d941c4c85b"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cos: 0.5403023058681398\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "mi promio ejemplo 10"
      ],
      "metadata": {
        "id": "ULDF5-9pRjhU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(ma.cos(ma.e))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mx7Y6r78RlUq",
        "outputId": "8fdb2631-6298-4649-e002-93e259f6bc94"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-0.9117339147869651\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 11"
      ],
      "metadata": {
        "id": "wCqftJHsSrFU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Lista1 = [1,5,7,3,6]\n",
        "print(Lista1)"
      ],
      "metadata": {
        "id": "_Q-9qxdgSxgQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5a1be740-e00b-460f-ce25-8f385a634f08"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 5, 7, 3, 6]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 12"
      ],
      "metadata": {
        "id": "FATDGvINtoTV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Lista1 [0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "de0a8vIBtqTX",
        "outputId": "c1c5f631-b75f-49fe-a0eb-4e8c1f9162e4"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Lista1 [3]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dvMmHeHbu2E9",
        "outputId": "84b737b2-7791-4319-e4eb-bf5f6cea9ba6"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 13"
      ],
      "metadata": {
        "id": "MW0SQJOQvHjg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('el primer y el segundo termino:', Lista1[0], Lista1[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eyy1oYGNvKYR",
        "outputId": "7989af3d-09c9-4637-94ab-6164f0bb6d58"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "el primer y el segundo termino: 1 5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('el error apararece cuando se indica un espacio superior a la lista', Lista1[6])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 165
        },
        "id": "dtko-vlIwdTv",
        "outputId": "0898d526-1da1-4cc4-c896-1d7fb8e5f5a1"
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndexError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-81-c8376c979438>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'el error apararece cuando se indica un espacio superior a la lista'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mLista1\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mIndexError\u001b[0m: list index out of range"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 14"
      ],
      "metadata": {
        "id": "v46RsLR8zRoc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(len(Lista1))"
      ],
      "metadata": {
        "id": "66g6OX_KzUJ5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(Lista1)\n",
        "Lista1[0]=45\n",
        "print(Lista1)"
      ],
      "metadata": {
        "id": "uqKyuJxj0sZB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Lista2 = ['uno', 'dos', 'tres']\n",
        "print(Lista2)"
      ],
      "metadata": {
        "id": "iZH3tfGiSsUx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Lista3 = [True, 'dos', 4]\n",
        "print(Lista3)"
      ],
      "metadata": {
        "id": "g6AJelGhS8oJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Lista4 = Lista1+Lista2+Lista3\n",
        "print(Lista4)"
      ],
      "metadata": {
        "id": "vDLQSDuVTKqJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Lista = ['esto', 'es', 'un', 'ejemplo']"
      ],
      "metadata": {
        "id": "4my2RJSUVEuv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(Lista[0:3])"
      ],
      "metadata": {
        "id": "xkW_myoyVc3H"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(Lista[0:])"
      ],
      "metadata": {
        "id": "b9VPOPpCVjyn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(Lista[:2])"
      ],
      "metadata": {
        "id": "Zn96Rpy-XFs-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(Lista[-1])"
      ],
      "metadata": {
        "id": "bFZsoxEaaWft"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(Lista[0:3:2])"
      ],
      "metadata": {
        "id": "un8Qbz9wazF4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Lista5 = [4,6,1,5,8,2,8875,23553,6756554,1345,2345,7899,23455,45678]"
      ],
      "metadata": {
        "id": "CIJM5GJXb7KL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a = 5 \n",
        "Lista5 = range(a)\n",
        "print(Lista5)"
      ],
      "metadata": {
        "id": "zeyCV3QgcDe2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a = 5\n",
        "b = 2 \n",
        "Lista5 = range(b, a)\n",
        "print(Lista5)"
      ],
      "metadata": {
        "id": "piD-ygJahGfQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 15 Tuplas "
      ],
      "metadata": {
        "id": "ATz-27iqkua5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Tupla = 'yo', 'tengo', 2, 'gatos'\n",
        "print(Tupla)"
      ],
      "metadata": {
        "id": "P8iQP_fokxe5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Tupla = ('yo', 'tengo', 2, 'gatos')\n",
        "print(Tupla)"
      ],
      "metadata": {
        "id": "t8D1zY6Nlqoy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "las tuplas no se pueden modificar "
      ],
      "metadata": {
        "id": "1VOmzAGRlz_f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Tupla[3] = 'perros'\n",
        "print(tupla)"
      ],
      "metadata": {
        "id": "mOxFCUSalzbK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "se puede deslizar entre la tupla"
      ],
      "metadata": {
        "id": "9MSHmfB7m2p5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(Tupla[1:3])"
      ],
      "metadata": {
        "id": "fAiYA5C6l-kv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Tupla2 = ('esto', 'es', 'otro', 'ejemplo', 23)\n",
        "print(Tupla+Tupla2)"
      ],
      "metadata": {
        "id": "C79r_g_QoLFP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 16 sets"
      ],
      "metadata": {
        "id": "a8utpHmppa75"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "gustos = {'gatos', 6, 'perros', 3453, 'novia', 4, 2, 7, 7, 42, 'manzana', 'pera'}\n",
        "print(gustos, type(gustos))"
      ],
      "metadata": {
        "id": "ecUMZgcyo6tS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "frutas = ['mango', 'pera', 'manzana', 'mora', 'uchua']\n",
        "set_frutas = set(frutas)\n",
        "print(set_frutas)"
      ],
      "metadata": {
        "id": "zZs5qBSw7nFB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(len(set_frutas))"
      ],
      "metadata": {
        "id": "ZmGDzPFb8MWH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "'manzana' in(set_frutas)"
      ],
      "metadata": {
        "id": "qjJmZ-O98Sxv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(set_frutas|gustos)"
      ],
      "metadata": {
        "id": "MHtaPkTO8ZvC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(set_frutas & gustos)"
      ],
      "metadata": {
        "id": "AmCrwJMr9FRo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 17 diccionarios "
      ],
      "metadata": {
        "id": "CzSGRQWE9co4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "midiccionario = {'fantasia': ['star wars', 'el señor de los anillos'], 'acción': ['matrix', 'yo robot'], 'horror': ['el aro', 'la monja'], 'heroes': ['hulk', 'thor']}"
      ],
      "metadata": {
        "id": "0ZxD90B69f97"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(midiccionario['heroes'])"
      ],
      "metadata": {
        "id": "VD-fjINxOUPG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "midiccionario['horror']= 'no se puede leer'\n",
        "print(midiccionario['horror'])"
      ],
      "metadata": {
        "id": "-5_P1H-mOlOV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "midiccionario['humor']= ['son como niños', 'como si fuera la primera vez']\n",
        "print(midiccionario['humor'])"
      ],
      "metadata": {
        "id": "xfJxkeV4PdVY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(midiccionario)"
      ],
      "metadata": {
        "id": "CCuMU5s_PtW6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 18 "
      ],
      "metadata": {
        "id": "cTm5A8gdPyf0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "primeracuerda = '\"el ejemplo de cuerdas/ sabiendo que'\n",
        "segundacuerda = ' al sumar las cuerdas/ se puede completar la frase\"'\n",
        "terceracuerda = primeracuerda+segundacuerda\n",
        "print(terceracuerda)"
      ],
      "metadata": {
        "id": "q_LXTqguQCTX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Enredo = 'esternocleidomastoideo'\n",
        "print('la primera letra es', Enredo[0])\n",
        "print('la segunda letra es', Enredo[1])\n",
        "print('le tercera letra es', Enredo[2])\n",
        "print('la letra final es', Enredo[-1])\n",
        "print('la penultima letra es', Enredo[-2])\n",
        "print('las primeras 7 letras son', Enredo[0:6])\n",
        "print('la frase al reves es', Enredo[::-1])"
      ],
      "metadata": {
        "id": "a2nZtQeEQsH0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('cuantas lestas e hay:', Enredo.count('e'))"
      ],
      "metadata": {
        "id": "7COrh5axSEUT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('la primera e que hay:', Enredo.find('e'))"
      ],
      "metadata": {
        "id": "YBlt2fd2SXJR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('todas las e ahora son i:', Enredo.replace('e', 'i'))"
      ],
      "metadata": {
        "id": "ifnekDauWHvO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mensaje = 'escribe fuerte'\n",
        "print(mensaje.upper())\n",
        "mensaje2 = 'O TAL VEZ MAS BAJO'\n",
        "print(mensaje2.lower())"
      ],
      "metadata": {
        "id": "M2tF5DebbKcw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        " "
      ],
      "metadata": {
        "id": "d0_5Q52qb7fC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 19 logica basica y condicional"
      ],
      "metadata": {
        "id": "sjFKWszMbiGu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = 23\n",
        "b = 56 \n",
        "print(a<b)"
      ],
      "metadata": {
        "id": "YQFI_ECLbub8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print((5<8) and (73<9) or (4<45) and not (234>454))"
      ],
      "metadata": {
        "id": "vB61-R3Olxjh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "veracidad"
      ],
      "metadata": {
        "id": "p_xsRxsyb6yI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(bool())"
      ],
      "metadata": {
        "id": "FxjLshyUbdyP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(bool('otro ejemplo'))"
      ],
      "metadata": {
        "id": "5r6yA9w3bkcU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(bool([]))"
      ],
      "metadata": {
        "id": "Toykhp5Kbrir"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(bool([1,2,3,4]))"
      ],
      "metadata": {
        "id": "UamFoG82buPu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "condicional if "
      ],
      "metadata": {
        "id": "E42zbJY8cMKM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "i= 2\n",
        "if i == 1:\n",
        "  print('i es evaluada en 1')\n",
        "elif i == 2: \n",
        "  print('i es evaluado en 2')\n",
        "elif i == 3:\n",
        "    print('i es evaluada en 2')\n",
        "else:\n",
        "   print('no se encuentra i') "
      ],
      "metadata": {
        "id": "BiEdaUHBo7LM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cuerda = 'despues de tanto tiempo?'\n",
        "if cuerda == 'despues de tanto tiempo?':\n",
        "  print('siempre')\n",
        "else:\n",
        "  print('EXPELIARMUS')"
      ],
      "metadata": {
        "id": "yBaMDF5_q939"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "i = 10\n",
        "if i % 2 == 0:\n",
        "  if i % 3 ==0:\n",
        "    print('i es divisible entre 2 y 3 ')\n",
        "  elif  i % 6 == 0:\n",
        "      print('tambien i es divisible entre 6')\n",
        "  else: \n",
        "        print('i es divisible entre 2, pero no entre 6')\n",
        "else:\n",
        "  print('este programa no encuentra solucion')"
      ],
      "metadata": {
        "id": "eBInhWdJdW-w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "u=7\n",
        "h=14\n",
        "if u < 10 and h > 11:\n",
        "  print('{0} es menor que 10 y {1} es mayor que 11'.format(u,h))\n",
        "else:\n",
        "  print('sera mejor poner otros numeros') "
      ],
      "metadata": {
        "id": "rS_UPyPRiHqs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 20 loops y funciones "
      ],
      "metadata": {
        "id": "sv2hbLXPm8MR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "d = 8\n",
        "while d > 0: \n",
        "  d -=1\n",
        "  print('esto es un ejemplo de loop {0}  '.format(d))"
      ],
      "metadata": {
        "id": "h6LkZfznnAQ3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for d in range(7):\n",
        "  print('se hace un loop {0} veces'.format(d+1))"
      ],
      "metadata": {
        "id": "f3gyiAjsxRaC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "o = 2\n",
        "while True:\n",
        " if o == 8:\n",
        "    break\n",
        "    i += 1\n",
        "print(o)"
      ],
      "metadata": {
        "id": "MQbEvzr59S3y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for o in range(5)\n",
        " if 0 == 8:\n",
        "   break\n",
        "   print(o)"
      ],
      "metadata": {
        "id": "EyLJy38NBFbA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dicc = {'nombre': 'Lorena', 'apellido': 'cordoba', 'nemesis': 'madrugar'}"
      ],
      "metadata": {
        "id": "Avo6cBliB0v7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for key in dicc:\n",
        "  print(key)"
      ],
      "metadata": {
        "id": "t7n6i8O_Ea-T"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for key in dicc: \n",
        "  print(dicc[key])"
      ],
      "metadata": {
        "id": "R8MR8SF0GX41"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for key, value in dicc.items():\n",
        "    print(key, ':', value)"
      ],
      "metadata": {
        "id": "DJfZmziXHLDn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Funciones"
      ],
      "metadata": {
        "id": "u9CeJTGFHlw_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def hola_a_todos():\n",
        "  \"\"\"escribir, hola a todos\"\"\"\n",
        "  print('hola a todos')\n",
        "hola_a_todos"
      ],
      "metadata": {
        "id": "0euYiDn0HnHM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for b in range(6):\n",
        "  hola_a_todos"
      ],
      "metadata": {
        "id": "teEEymf3KRbG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def multiplicar_por_8(x):\n",
        "  return x * 8\n",
        "n=7\n",
        "print(n)\n",
        "print(multiplicar_por_8(n))"
      ],
      "metadata": {
        "id": "zJLADk_mLiHi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def area_cuadrado(lado):\n",
        "  return lado * lado\n"
      ],
      "metadata": {
        "id": "QA-UvR0cUuWv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "L=6\n",
        "print('area', area_cuadrado(L))\n",
        "print('lado:', L)"
      ],
      "metadata": {
        "id": "qdQNoauaU4Zw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def volumen(Lado):\n",
        "  return Lado * Lado * Lado \n"
      ],
      "metadata": {
        "id": "9-B9j33eVym1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "print('volumen:', volumen(L))"
      ],
      "metadata": {
        "id": "bdUBAPIRWLpJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def valores(*ar):\n",
        "    val = 0\n",
        "    for k in ar:\n",
        "        val += i\n",
        "    return val"
      ],
      "metadata": {
        "id": "Q1xzBA7kZ-QK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(valores(3, 4, 7))\n",
        "print(valores(30, 50, 70))\n",
        "print(valores(1, 2, 3, 4, 5, 6, 7, 8, 9))"
      ],
      "metadata": {
        "id": "5CQd-m9aapo3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def testeo_argumentos(*args):\n",
        "    print(type(args))\n",
        "\n",
        "testeo_argumentos(6, 7, 8, 9, 10, 11, 12, 13, 14 ,15)"
      ],
      "metadata": {
        "id": "FdKFN-pHbjo4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "introducción a numpy "
      ],
      "metadata": {
        "id": "m-IzRLE_deo4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 1 arreglos "
      ],
      "metadata": {
        "id": "wa9Q7lhAlvBb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        " \n"
      ],
      "metadata": {
        "id": "qzbRt88trteQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arreglo = [43.575, 5, 6, 3, 754.5746]"
      ],
      "metadata": {
        "id": "iiHWptv4ktdb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "retorno = np.array(arreglo)\n",
        "print(retorno, type(retorno))"
      ],
      "metadata": {
        "id": "Tw-S7tlJrYjf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "G = np.array([[34, 45], [16, 23]])\n",
        "print(G, type(G))"
      ],
      "metadata": {
        "id": "Y-pZ2_mUsycT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(G.shape)"
      ],
      "metadata": {
        "id": "MXdTXK1-vpZ6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(arreglo[0], arreglo[len(arreglo)-1])"
      ],
      "metadata": {
        "id": "1YiiqwK1wj54"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(arreglo[2:4])"
      ],
      "metadata": {
        "id": "GSMOVRYM4mJa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(G[0, :])"
      ],
      "metadata": {
        "id": "Dqf8eIfo43Wt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(type(G[0, :]))"
      ],
      "metadata": {
        "id": "7qq35DZl6aZ7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(G[1,1])"
      ],
      "metadata": {
        "id": "tlbQk1UZ7QvA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(G[0])"
      ],
      "metadata": {
        "id": "OyUc_0C-7Vwt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 2 funciones "
      ],
      "metadata": {
        "id": "8uP2DgBL7QST"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.log(arreglo))"
      ],
      "metadata": {
        "id": "qrnkiUCE7hHE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.mean(arreglo))"
      ],
      "metadata": {
        "id": "GZOzIUBOC3f4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.max(arreglo))"
      ],
      "metadata": {
        "id": "yGI88f00Dqak"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemlo 3 retornos"
      ],
      "metadata": {
        "id": "b5FDnh0nD3hw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arreglo * (5  + 3) "
      ],
      "metadata": {
        "id": "bYeBN024JNlj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('estadistica:',  np.std(arreglo), 'media:', np.mean(arreglo))"
      ],
      "metadata": {
        "id": "z6yCXFNzL8hd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "M = 50\n",
        "assets = np.zeros((M, 200))\n",
        "arreglo = np.zeros((M, 200))"
      ],
      "metadata": {
        "id": "0NHiMyuIaTcf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "K_1 = np.random.normal(2.45, 0.543, 200)\n",
        "arreglo[0] = K_1\n",
        "assets[0] = np.cumprod(K_1)"
      ],
      "metadata": {
        "id": "x_a610OTdJIP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(1, M):\n",
        "    K_i = K_1 + np.random.normal(0.001, 0.02, 200)\n",
        "    arreglo[i] = K_i\n",
        "    assets[i] = np.cumprod(K_i)\n",
        "    \n",
        "Media_arreglo = [(np.mean(R) - 1)*100 for R in arreglo]\n",
        "volatilidad = [np.std(R) for R in arreglo]"
      ],
      "metadata": {
        "id": "PV7XgMVor0gq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.bar(np.arange(len(Media_arreglo)), Media_arreglo)\n",
        "plt.xlabel('Valor')\n",
        "plt.ylabel('Retorno')\n",
        "plt.title('Retorno por {0} activos aleatorios'.format(M));"
      ],
      "metadata": {
        "id": "UfWvI3Erxvvz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 4 "
      ],
      "metadata": {
        "id": "dJALs-Luz4IF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Y = np.random.uniform(0, 1, M)\n",
        "Y = Y/np.sum(Y)"
      ],
      "metadata": {
        "id": "Da-RH_knz0Uc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "p_arreglo = np.dot(Y, Media_arreglo)\n",
        "print(\"expectativa retorno del porftafolio: \", p_arreglo)"
      ],
      "metadata": {
        "id": "8ky4VVzN-ach"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 5 "
      ],
      "metadata": {
        "id": "a5bDcfsu_doA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "l = np.array([7, 8, np.nan, 9, 0])\n",
        "print(l)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JLJ9uZDw_fv_",
        "outputId": "fa2c2bf6-991d-46cf-9e15-80bd499825fb"
      },
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 7.  8. nan  9.  0.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.mean(l))"
      ],
      "metadata": {
        "id": "XbNwmr6n__yO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "np.isnan(l)"
      ],
      "metadata": {
        "id": "xcYs2-kIAO1E"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lx = ~np.isnan(l)\n",
        "print(l[lx])"
      ],
      "metadata": {
        "id": "IWFs2GYkAfws"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.mean(l[lx]))"
      ],
      "metadata": {
        "id": "jHarUAxIA6oR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.nanmean(l))"
      ],
      "metadata": {
        "id": "SxStqAwwA_Uw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mi propio ejemplo 5"
      ],
      "metadata": {
        "id": "e0NURoszBIqf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "A = np.array([\n",
        "        [1, 8, 7, 45, 8],\n",
        "        [5, 7, 4, 67, 21],\n",
        "        [92, 89, 56, 10, 10]        \n",
        "    ])\n",
        "B = np.array([\n",
        "        [4, 4, 2],\n",
        "        [2, 3, 1],\n",
        "        [6, 5, 8],\n",
        "        [9, 9, 9]\n",
        "    ])"
      ],
      "metadata": {
        "id": "f9O4nsvBEbet"
      },
      "execution_count": 83,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.dot(A, B))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 200
        },
        "id": "cgDXM5XaFJM3",
        "outputId": "5a91ac23-31f9-46ee-e12f-81908892620b"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-84-c4010e250c2c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mA\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mB\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mdot\u001b[0;34m(*args, **kwargs)\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: shapes (3,5) and (4,3) not aligned: 5 (dim 1) != 4 (dim 0)"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.dot(B, A))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6RnnoDz-FWm0",
        "outputId": "57be3a66-ac83-40df-c96a-f056f20eefd7"
      },
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 208  238  156  468  136]\n",
            " [ 109  126   82  301   89]\n",
            " [ 767  795  510  685  233]\n",
            " [ 882  936  603 1098  351]]\n"
          ]
        }
      ]
    }
  ]
}